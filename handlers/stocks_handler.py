from aiogram import Router
from aiogram.dispatcher.filters.text import Text
from aiogram.types import Message

import bot
from data import parsing_data as ps, users_info
from keyboards import stocks_menu



router = Router()  # 2


@router.message(Text(text="–ê–∫—Ü–∏–∏"))
async def answer_stock(message: Message):
    await message.answer(
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö –∏ –∏—Ö –∞–∫—Ü–∏—è—Ö",
        reply_markup=stocks_menu.get_stocks_menu()
    )


@router.message(commands=['msk_add'])
async def moex_add(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
        )
        return
    usr_id = str(message.from_user.id)
    if len(message.text.split()) == 1:
        return
    name = message.text.split()[1].strip().lower()
    mes = ""
    cnt = 1
    for stock in ps.stocks_msc_info.keys():
        if name in stock[0].lower() or name in stock[1].lower():
            if name == stock[0].lower() or name == stock[1].lower():
                wish_list = list(users_info.users_sets_for_msc_stocks.get(usr_id, []))
                wish_list.append(tuple(stock))
                users_info.users_sets_for_msc_stocks[usr_id] = tuple(wish_list)
                await message.answer(
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ {stock[0]}({stock[1]}) –≤ —Ç–≤–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏.",
                    reply_markup=stocks_menu.get_stocks_menu()
                )
                return
            elif cnt < 50:
                mes += f"{cnt}) {stock[0]}({stock[1]})\n"
                cnt += 1
            elif cnt == 50:
                mes += "..."
                cnt += 1
    await message.answer(
        "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º—ã –Ω–∞—à–ª–∏ –≤–æ—Ç —Ç–∞–∫–∏–µ –∞–∫—Ü–∏–∏\n" + mes,
    )


@router.message(commands=['msk_find'])
async def moex_find(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
        )
        return
    usr_id = str(message.from_user.id)
    if len(message.text.split()) == 1:
        return
    if not users_info.users_notifications_msc_stocks.get(usr_id, None):
        pattern = [0, 1, 2]
    else:
        pattern = users_info.users_notifications_msc_stocks[usr_id][0]
    name = message.text.split()[1].strip().lower()

    mes = ""
    cnt = 1
    for stock in ps.stocks_msc_info.keys():
        if name in stock[0].lower() or name in stock[1].lower():
            if cnt < 50:
                mes += f"{cnt}) {stock[0]}({stock[1]}) "
                for trait in pattern:
                    if (len(ps.stocks_msc_info[stock][trait]) == 0):
                        mes += f"üî∏___"
                        continue
                    if ps.stocks_msc_info[stock][trait][0] == '-':
                        mes += f"üî∏üî¥{ps.stocks_msc_info[stock][trait]}üî¥"
                    elif ps.stocks_msc_info[stock][trait][0] == '+':
                        mes += f"üî∏üü¢{ps.stocks_msc_info[stock][trait]}üü¢"
                    else:
                        mes += f"üî∏{ps.stocks_msc_info[stock][trait]}"
                mes += "\n"
                cnt += 1
            elif cnt == 50:
                mes += "..."
                cnt += 1
    await message.answer(
        "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º—ã –Ω–∞—à–ª–∏ –≤–æ—Ç —Ç–∞–∫–∏–µ –∞–∫—Ü–∏–∏\n" + mes,
        reply_markup=stocks_menu.get_stocks_menu()
    )


@router.message(commands=['msk_del'])
async def moex_delete(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
        )
        return
    if len(message.text.split()) == 1:
        return
    usr_id = str(message.from_user.id)
    name = message.text.split()[1].strip().lower()
    if usr_id in users_info.users_sets_for_msc_stocks.keys():
        wish_list = list(users_info.users_sets_for_msc_stocks[usr_id])
    else:
        wish_list = []
    for i in range(len(wish_list)):
        if name == wish_list[i][0].lower() or name == wish_list[i][1].lower():
            await message.answer(
                f"–ê–∫—Ü–∏—è {wish_list[i][0]}({wish_list[i][1]}) —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö",
                reply_markup=stocks_menu.get_stocks_menu()
            )
            del wish_list[i]
            users_info.users_sets_for_msc_stocks[usr_id] = tuple(wish_list)
            return
    await message.answer(
        f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∞–∫—Ü–∏–µ–π {name}",
        reply_markup=stocks_menu.get_stocks_menu()
    )

@router.message(Text(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏ –ú–æ—Å–ë–∏—Ä–∂–∏"))
async def answer_msc_stocks(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–ª–∏ –µ–µ —Ç–∏–∫–µ—Ä.\n"
        "–®–∞–±–ª–æ–Ω –¥–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ - '/msk_find ____'\n"
        "–®–∞–±–ª–æ–Ω –¥–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫–∏ - '/msk_add ____'\n"
        "–®–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ - '/msk_del ____'",
        reply_markup=stocks_menu.get_stocks_menu()
    )


@router.message(Text(text="–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏ –ú–æ—Å–ë–∏—Ä–∂–∏"))
async def answer_followed_msk_stocks(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
        )
        return
    usr_id = str(message.from_user.id)
    if usr_id not in users_info.users_sets_for_msc_stocks.keys():
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π –ú–æ—Å–ë–∏—Ä–∂–∏ –ø—É—Å—Ç",
            reply_markup=stocks_menu.get_stocks_menu()
        )
        return
    if not users_info.users_notifications_msc_stocks.get(usr_id, None):
        pattern = [0, 1, 2]
    else:
        pattern = users_info.users_notifications_msc_stocks[usr_id][0]
    cnt = 1
    if len(users_info.users_sets_for_msc_stocks[usr_id]) == 0:
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π –ø—É—Å—Ç",
            reply_markup=stocks_menu.get_stocks_menu()
        )
        return
    mes = ""
    for stock in users_info.users_sets_for_msc_stocks[usr_id]:
        mes += f"{cnt}) {stock[0]}({stock[1]}) "
        for trait in pattern:
            if ps.stocks_msc_info[stock][trait][0] == '-':
                mes += f"üî∏üî¥{ps.stocks_msc_info[stock][trait]}üî¥"
            elif ps.stocks_msc_info[stock][trait][0] == '+':
                mes += f"üî∏üü¢{ps.stocks_msc_info[stock][trait]}üü¢"
            else:
                mes += f"üî∏{ps.stocks_msc_info[stock][trait]}"
        mes += "\n"
        cnt += 1
        if cnt % 50 == 0:
            await message.answer(
                mes
            )
            mes = ""
    await message.answer(
        mes
    )

@router.message(commands=['spb_add'])
async def moex_add(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
        )
        return
    usr_id = str(message.from_user.id)
    if len(message.text.split()) == 1:
        return
    name = message.text.split()[1].strip().lower()
    mes = ""
    cnt = 1
    for stock in ps.stocks_spb_info.keys():
        if name in stock[0].lower() or name in stock[1].lower():
            if name == stock[0].lower() or name == stock[1].lower():
                wish_list = list(users_info.users_sets_for_spb_stocks.get(usr_id, []))
                wish_list.append(tuple(stock))
                users_info.users_sets_for_spb_stocks[usr_id] = tuple(wish_list)
                await message.answer(
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ {stock[0]}({stock[1]}) –≤ —Ç–≤–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏.",
                    reply_markup=stocks_menu.get_stocks_menu()
                )
                return
            elif cnt < 50:
                mes += f"{cnt}) {stock[0]}({stock[1]})\n"
                cnt += 1
            elif cnt == 50:
                mes += "..."
                cnt += 1
    await message.answer(
        "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º—ã –Ω–∞—à–ª–∏ –≤–æ—Ç —Ç–∞–∫–∏–µ –∞–∫—Ü–∏–∏\n" + mes,
    )


@router.message(commands=['spb_find'])
async def moex_find(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
        )
        return
    usr_id = str(message.from_user.id)
    if len(message.text.split()) == 1:
        return
    if not users_info.users_notifications_spb_stocks.get(usr_id, None):
        pattern = [0, 1, 2]
    else:
        pattern = users_info.users_notifications_spb_stocks[usr_id][0]
    name = message.text.split()[1].strip().lower()

    mes = ""
    cnt = 1
    for stock in ps.stocks_spb_info.keys():
        if name in stock[0].lower() or name in stock[1].lower():
            if cnt < 50:
                mes += f"{cnt}) {stock[0]}({stock[1]}) "
                for trait in pattern:
                    if (len(ps.stocks_spb_info[stock][trait]) == 0):
                        mes += f"üî∏___"
                        continue
                    if ps.stocks_spb_info[stock][trait][0] == '-':
                        mes += f"üî∏üî¥{ps.stocks_spb_info[stock][trait]}üî¥"
                    elif ps.stocks_spb_info[stock][trait][0] == '+':
                        mes += f"üî∏üü¢{ps.stocks_spb_info[stock][trait]}üü¢"
                    else:
                        mes += f"üî∏{ps.stocks_spb_info[stock][trait]}"
                mes += "\n"
                cnt += 1
            elif cnt == 50:
                mes += "..."
                cnt += 1
    await message.answer(
        "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º—ã –Ω–∞—à–ª–∏ –≤–æ—Ç —Ç–∞–∫–∏–µ –∞–∫—Ü–∏–∏\n" + mes,
        reply_markup=stocks_menu.get_stocks_menu()
    )


@router.message(commands=['spb_del'])
async def moex_delete(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
        )
        return
    if len(message.text.split()) == 1:
        return
    usr_id = str(message.from_user.id)
    name = message.text.split()[1].strip().lower()
    if usr_id in users_info.users_sets_for_spb_stocks.keys():
        wish_list = list(users_info.users_sets_for_spb_stocks[usr_id])
    else:
        wish_list = []
    for i in range(len(wish_list)):
        if name == wish_list[i][0].lower() or name == wish_list[i][1].lower():
            await message.answer(
                f"–ê–∫—Ü–∏—è {wish_list[i][0]}({wish_list[i][1]}) —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö",
                reply_markup=stocks_menu.get_stocks_menu()
            )
            del wish_list[i]
            users_info.users_sets_for_spb_stocks[usr_id] = tuple(wish_list)
            return
    await message.answer(
        f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∞–∫—Ü–∏–µ–π {name}",
        reply_markup=stocks_menu.get_stocks_menu()
    )


@router.message(Text(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏ –ü–ê–û –°–ü–ë –ë–∏—Ä–∂–∞"))
async def answer_spb_stocks(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–ª–∏ –µ–µ —Ç–∏–∫–µ—Ä.\n"
        "–®–∞–±–ª–æ–Ω –¥–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ - '/spb_find ____'\n"
        "–®–∞–±–ª–æ–Ω –¥–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫–∏ - '/spb_add ____'\n"
        "–®–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ - '/spb_del ____'",
        reply_markup=stocks_menu.get_stocks_menu()
    )


@router.message(Text(text="–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏ –°–ü–ë –ë–∏—Ä–∂–∏"))
async def answer_followed_spb_stocks(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
        )
        return
    usr_id = str(message.from_user.id)
    if usr_id not in users_info.users_sets_for_spb_stocks.keys():
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π –ú–æ—Å–ë–∏—Ä–∂–∏ –ø—É—Å—Ç",
            reply_markup=stocks_menu.get_stocks_menu()
        )
        return
    if not users_info.users_notifications_spb_stocks.get(usr_id, None):
        pattern = [0, 1, 2]
    else:
        pattern = users_info.users_notifications_spb_stocks[usr_id][0]
    cnt = 1
    if len(users_info.users_sets_for_spb_stocks[usr_id]) == 0:
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π –ø—É—Å—Ç",
            reply_markup=stocks_menu.get_stocks_menu()
        )
        return
    mes = ""
    for stock in users_info.users_sets_for_spb_stocks[usr_id]:
        mes += f"{cnt}) {stock[0]}({stock[1]}) "
        for trait in pattern:
            if ps.stocks_spb_info[stock][trait][0] == '-':
                mes += f"üî∏üî¥{ps.stocks_spb_info[stock][trait]}üî¥"
            elif ps.stocks_spb_info[stock][trait][0] == '+':
                mes += f"üî∏üü¢{ps.stocks_spb_info[stock][trait]}üü¢"
            else:
                mes += f"üî∏{ps.stocks_spb_info[stock][trait]}"
        mes += "\n"
        cnt += 1
        if cnt % 50 == 0:
            await message.answer(
                mes
            )
            mes = ""
    await message.answer(
        mes
    )

@router.message(Text(text="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏"))
async def answer_invest_ideas(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
        )
        return
    mes = ""
    cnt = 1
    for idea in ps.invest_ideas_info.keys():
        mes += f'{cnt}) {idea.strip()}:\n{ps.invest_ideas_info[idea][0]}\n'\
               f'{ps.invest_ideas_info[idea][1]}\n{ps.invest_ideas_info[idea][2]}'
        cnt += 1
        await message.answer(
            mes
        )
        mes = ""