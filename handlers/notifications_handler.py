from aiogram import Router
from aiogram.dispatcher.filters.text import Text
from aiogram.types import Message, ReplyKeyboardRemove

import bot
import data.parsing_data as ps
import data.users_info as usr_info
import keyboards as kbs

router = Router()  # 4

@router.message(Text(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"))
async def change_notifications(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
        return
    await message.answer(
        "–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å",
        reply_markup=kbs.main_menu.get_change_notifications_menu()
    )

@router.message(Text(text="–ù–æ–≤–æ—Å—Ç–∏"))
async def change_news_notifications_mode(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
        return
    usr_id = str(message.from_user.id)
    if usr_id not in usr_info.users_news_progress:
        usr_info.users_news_progress[usr_id] = True
        await message.answer(
            "üü¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –≤–∫–ª—é—á–µ–Ω–æ üü¢",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
    else:
        del usr_info.users_news_progress[usr_id]
        await message.answer(
            "üî¥ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –≤—ã–∫–ª—é—á–µ–Ω–æ üî¥",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )


@router.message(Text(text="–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞"))
async def notification_message(message: Message):
    await message.answer(
        "üî∑–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å."
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ú–æ—Å–ë–∏—Ä–∂–∏, —Ç–æ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –∏–¥–µ—Ç –∫–æ–º–∞–Ω–¥–∞ '/msk_ch', –¥–ª—è –°–ü–ë –ë–∏—Ä–∂–∏ '/spb_ch' –¥–∞–ª–µ–µ —á–∏—Å–ª–∞"
    )
    await message.answer(
        "üî∑–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ë–∏—Ä–∂—ã –°–ü–ë:\n0 - —Ü–µ–Ω–∞\n1 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å\n2 - –æ–±—ä–µ–º —Å–¥–µ–ª–æ–∫ –≤ $\n3 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "4 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü\n5 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞\n6 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≥–æ–¥"
    )
    await message.answer(
        "üî∑–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –ë–∏—Ä–∂—ã:\n0 - —Ü–µ–Ω–∞\n1 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å\n2 - –æ–±—ä–µ–º —Å–¥–µ–ª–æ–∫ –≤ $\n3 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "4 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü\n5 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞\n6 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≥–æ–¥\n7 - –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤ ‚ÇΩ\n8 - –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤ $"
    )
    await message.answer(
        "üî∑–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É 11 –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '/msk_ch 11 (—Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)'\n"
        "üî∑–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É 10 –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –∞ –∑–∞—Ç–µ–º –Ω–æ–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '/spb_ch 10 (–Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'\n"
        "üî∑–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–∏—à–∏—Ç–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω–æ–º–µ—Ä –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '/msk_ch (–Ω–æ–º–µ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞) (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)'"
        "üî∑–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ '/help_pattern'",
        reply_markup=kbs.main_menu.get_change_notifications_menu()
    )



async def check_indexes_moex(parameters: list) -> bool:
    for elem in parameters:
        if not elem.isnumeric():
            return True
        if not 0 <= int(elem) <= 8:
            return True
    return False



@router.message(Text(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –ë–∏—Ä–∂–∏"))
async def change_msk_stocks_notifications_patterns(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
        return
    usr_id = str(message.from_user.id)
    usr_info.users_notifications_msc_stocks[usr_id] = usr_info.users_notifications_msc_stocks.get(usr_id, tuple())

    notification_tuple = usr_info.users_notifications_msc_stocks[usr_id]

    if len(notification_tuple) >= 1:
        idx = 0
        mes = f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {idx}) {notification_tuple[0]}\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ(–í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–∞–∫—Å–∏–º—É–º 10):\n"
        for another_pattern in notification_tuple[1:]:
            idx += 1
            mes += f"{idx}) {another_pattern}\n"
        await message.answer(
            mes,
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        mes = "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n–°–∞–º–æ–µ –≤—Ä–µ–º—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ—á–∫—É –∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω."
        await message.answer(
            mes,
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )



@router.message(commands=['msk_ch'])
async def change_patterns_msk_stocks_command(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
        return
    params = message.text.split()
    pattern_idx = params[1]
    pattern_params = params[2:]

    if not pattern_idx.isnumeric():
        return
    elif int(pattern_idx) == 112:
        await message.answer(
            "–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
        return

    usr_id = str(message.from_user.id)
    usr_info.users_notifications_msc_stocks[usr_id] = usr_info.users_notifications_msc_stocks.get(usr_id, tuple())

    patterns_list = list(usr_info.users_notifications_msc_stocks[usr_id])

    if int(pattern_idx) == 10:
        if len(pattern_params) > 1:
            patterns_list[int(pattern_params[0])]  = [int(i) for i in pattern_params[1:]]
            usr_info.users_notifications_msc_stocks[usr_id] = tuple(patterns_list)
            await message.answer(
                "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                reply_markup=kbs.main_menu.get_change_notifications_menu()
            )
            return

    if await check_indexes_moex(pattern_params):
        await message.answer(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üî¥–û—à–∏–±–∫–∞üî¥"
        )
        await change_msk_stocks_notifications_patterns(message)
        return


    if not (0 <= int(pattern_idx) < len(patterns_list) or int(pattern_idx) == 11):
        await message.answer(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üî¥–û—à–∏–±–∫–∞üî¥"
        )
        await change_msk_stocks_notifications_patterns(message)
        return

    if len(pattern_params) == 0:
        if 0 <= int(pattern_idx) < len(patterns_list):
            del patterns_list[int(pattern_idx)]
            usr_info.users_notifications_msc_stocks[usr_id] = tuple(patterns_list)
            await message.answer(
                "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                reply_markup=kbs.main_menu.get_change_notifications_menu()
            )
        else:
            await message.answer(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üî¥–û—à–∏–±–∫–∞üî¥"
            )
            await change_msk_stocks_notifications_patterns(message)
        return
    if len(patterns_list) >= 10:
        await message.answer(
            "üî¥–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤üî¥",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
        await change_msk_stocks_notifications_patterns(message)
        return
    if int(pattern_idx) == 11:
        patterns_list.append([int(param) for param in pattern_params])
    else:
        patterns_list[int(pattern_idx)] = [int(param) for param in pattern_params]
    usr_info.users_notifications_msc_stocks[usr_id] = tuple(patterns_list)
    await message.answer(
        "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        reply_markup=kbs.main_menu.get_change_notifications_menu()
    )



async def check_indexes_spb(parameters: list) -> bool:
    for elem in parameters:
        if not elem.isnumeric():
            return True
        if not 0 <= int(elem) <= 8:
            return True
    return False



@router.message(Text(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –°–ü–ë –ë–∏—Ä–∂–∏"))
async def change_spb_stocks_notifications_patterns(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
        return
    usr_id = str(message.from_user.id)
    usr_info.users_notifications_spb_stocks[usr_id] = usr_info.users_notifications_spb_stocks.get(usr_id, tuple())

    notification_tuple = usr_info.users_notifications_spb_stocks[usr_id]

    if len(notification_tuple) >= 1:
        idx = 0
        mes = f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {idx}) {notification_tuple[0]}\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ(–í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–∞–∫—Å–∏–º—É–º 10):\n"
        for another_pattern in notification_tuple[1:]:
            idx += 1
            mes += f"{idx}) {another_pattern}\n"
        await message.answer(
            mes,
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        mes = "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n–°–∞–º–æ–µ –≤—Ä–µ–º—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ—á–∫—É –∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω."
        await message.answer(
            mes,
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )


@router.message(commands=['spb_ch'])
async def change_patterns_spb_stocks_command(message: Message):
    if ps.updating:
        await message.answer(
            "–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ~10 —Å–µ–∫—É–Ω–¥",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
        return
    params = message.text.split()
    pattern_idx = params[1]
    pattern_params = params[2:]

    if not pattern_idx.isnumeric():
        return
    elif int(pattern_idx) == 112:
        await message.answer(
            "–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
        return

    usr_id = str(message.from_user.id)
    usr_info.users_notifications_spb_stocks[usr_id] = usr_info.users_notifications_spb_stocks.get(usr_id, tuple())

    patterns_list = list(usr_info.users_notifications_spb_stocks[usr_id])

    if int(pattern_idx) == 10:
        if len(pattern_params) > 1:
            patterns_list[int(pattern_params[0])]  = [int(i) for i in pattern_params[1:]]
            usr_info.users_notifications_spb_stocks[usr_id] = tuple(patterns_list)
            await message.answer(
                "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                reply_markup=kbs.main_menu.get_change_notifications_menu()
            )
            return

    if await check_indexes_spb(pattern_params):
        await message.answer(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—à–∏–±–∫–∞"
        )
        await change_spb_stocks_notifications_patterns(message)
        return


    if not (0 <= int(pattern_idx) < len(patterns_list) or int(pattern_idx) == 11):
        await message.answer(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—à–∏–±–∫–∞"
        )
        await change_spb_stocks_notifications_patterns(message)
        return

    if len(pattern_params) == 0:
        if 0 <= int(pattern_idx) < len(patterns_list):
            del patterns_list[int(pattern_idx)]
            usr_info.users_notifications_spb_stocks[usr_id] = tuple(patterns_list)
            await message.answer(
                "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                reply_markup=kbs.main_menu.get_change_notifications_menu()
            )
        else:
            await message.answer(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—à–∏–±–∫–∞"
            )
            await change_spb_stocks_notifications_patterns(message)
        return
    if len(patterns_list) >= 10:
        await message.answer(
            "üî¥–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤üî¥",
            reply_markup=kbs.main_menu.get_change_notifications_menu()
        )
        await change_spb_stocks_notifications_patterns(message)
        return
    if int(pattern_idx) == 11:
        patterns_list.append([int(param) for param in pattern_params])
    else:
        patterns_list[int(pattern_idx)] = [int(param) for param in pattern_params]
    usr_info.users_notifications_spb_stocks[usr_id] = tuple(patterns_list)
    await message.answer(
        "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        reply_markup=kbs.main_menu.get_change_notifications_menu()
    )

